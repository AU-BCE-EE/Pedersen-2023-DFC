dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# write.csv(dat, 'C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/GitHub/DC-validation-test-2022/data/test1.csv')
# # Experiment A
# # The dataframe in 'data' added here has undergone filtering and addition of chamber ID/treatment
#
# dat <- read.csv('../data/exp1.csv', header = TRUE, sep = ';')
# dat$id <- as.character(dat$id)
# first look
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# fixing a time bug
dat$elapsed.time[dat$elapsed.time == 9.60] <- 9.59
# background data:
WT.bg <- dat[dat$treat == 'WT bg', ]
DFC.bg <- dat[dat$treat == 'DFC bg', ]
# outlet data:
WT <- dat[dat$treat == 'WT', ]
DFC <- dat[dat$treat == 'DFC', ]
# average background values
WT.bg.summ <- aggregate2(WT.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
DFC.bg.summ <- aggregate2(DFC.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
# joining average background and outlet data
WT <- full_join(WT.bg.summ, WT, by = 'elapsed.time')
DFC <- full_join(DFC.bg.summ, DFC, by = 'elapsed.time')
# subtracting background from outlet data
WT$NH3.corr <- WT$NH3_30s - WT$NH3_30s.bg
DFC$NH3.corr <- DFC$NH3_30s - DFC$NH3_30s.bg
# check
WT[! complete.cases(WT), ]
DFC[! complete.cases(DFC), ]
# combining
dat <- rbind(WT, DFC)
# ambient temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temp.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
dat$date.time.weather <- dat$date.time
dat$date.time.weather <- as.character(round_date(dat$date.time.weather, '1 hour'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
M.N <- 14.0067 # g * mol^-1
dat <- data
dat <- dat[-c(0:205), ]
#
# # #######################
# #
# dat$elapsed.time <- difftime(dat$date.time, min(dat$date.time), units='hour')
#
# list <- as.numeric(1:18)
# dat$id <- as.character(dat$MPVPosition)
# dat <- dat[dat$id == list, ]
#
# ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(0, 1.8)
# ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(3.6, 6)# + ylim(600, 1000)
#
# # ser ud til at vÃ¦re hurtigere genfinding med nye slanger/DC
# #
# ##########################
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13' | dat$id == '14' |
dat$id == '15' | dat$id == '16' | dat$id == '17' | dat$id == '18', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:18] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'v14', 'v15', 'v16', 'v17', 'v18')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:18]
for (i in 1:18){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, v14, v15, v16, v17, v18)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dat <- new.dat
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# write.csv(dat, 'C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/GitHub/DC-validation-test-2022/data/test1.csv')
# # Experiment A
# # The dataframe in 'data' added here has undergone filtering and addition of chamber ID/treatment
#
# dat <- read.csv('../data/exp1.csv', header = TRUE, sep = ';')
# dat$id <- as.character(dat$id)
# first look
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# fixing a time bug
dat$elapsed.time[dat$elapsed.time == 9.60] <- 9.59
# background data:
WT.bg <- dat[dat$treat == 'WT bg', ]
DFC.bg <- dat[dat$treat == 'DFC bg', ]
# outlet data:
WT <- dat[dat$treat == 'WT', ]
DFC <- dat[dat$treat == 'DFC', ]
# average background values
WT.bg.summ <- aggregate2(WT.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
DFC.bg.summ <- aggregate2(DFC.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
# joining average background and outlet data
WT <- full_join(WT.bg.summ, WT, by = 'elapsed.time')
DFC <- full_join(DFC.bg.summ, DFC, by = 'elapsed.time')
# subtracting background from outlet data
WT$NH3.corr <- WT$NH3_30s - WT$NH3_30s.bg
DFC$NH3.corr <- DFC$NH3_30s - DFC$NH3_30s.bg
# check
WT[! complete.cases(WT), ]
DFC[! complete.cases(DFC), ]
# combining
dat <- rbind(WT, DFC)
# ambient temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temp.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
dat$date.time.weather <- dat$date.time
dat$date.time.weather <- as.character(round_date(dat$date.time.weather, '1 hour'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
M.N <- 14.0067 # g * mol^-1
dat$air.flow <- 1
dat[dat$treat == 'WT', ]$air.flow <- 33.2 * 60 # L min^-1
dat[dat$treat == 'DFC', ]$air.flow <- 49 * 60 # L min^-1
dat$A.frame <- 1
dat[dat$treat == 'WT', ]$A.frame <- 0.293 * 0.674 #m^2
dat[dat$treat == 'DFC', ]$A.frame <- (0.7/2)^2 * 3.14 #m^2
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
mean(dat$temp[1:3])
mean(dat$temp)
min(dat$temp)
max(dat$temp)
weather.expA <- dat[, c(1, 36)]
weather.expA$experiment <- 'Experiment A'
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.NH3 * min^-1 * m^-2
dat$flux <- (dat$n * M.N * dat$air.flow) / dat$A.frame
# From g.N * min^-1 * m^-2
# rearranging data by tunnel
dat <- arrange(dat, by = id)
View(dat)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time, last point * 144 min (time from start to start 18 x 8 min)
dat$flux.time <- dat$flux.tr * 144
# cumulative emis
dat <- mutate(group_by(dat, id, treat), cum.emis = cumsum(flux.time))
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
dat.end <- dat.summ[dat.summ$elapsed.time == 60, ]
dat <- dat[dat$elapsed.time <= 60, ]
dat.end.stat <- dat[dat$elapsed.time == 60, ]
ggplot(dat, aes(elapsed.time, cum.emis, color = treat)) +
geom_point() +
geom_line(aes(group = id)) +
theme_bw() +
scale_color_brewer(palette = 'Set1') +
ylab(expression(paste('Cumulative  ', NH[3]-N, '  [g  ', m^-2, ']'))) +
xlab('Time after digestate application [hours]') +
theme(legend.title = element_blank(), legend.position = 'bottom')
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
source('subset_weather.R')
source('mearge.R')
View(df2)
View(bC_th)
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
source('subset_weather.R')
source('mearge.R')
source('plot.R')
View(df2)
View(df1)
test <- df1[df1$elapsed.time == '120', ]
View(test)
test <- df1[df1$elapsed.time == '119', ]
View(test)
test <- test[test$app.meth == 'Trailing hose', ]
test <- df1[df1$elapsed.time == '119.5', ]
View(test)
test <- df1[df1$elapsed.time == '119', ]
test <- df1[df1$elapsed.time == '118', ]
test <- df1[df1$elapsed.time == '119', ]
test <- test[test$app.meth == 'Trailing hose', ]
test <- df1[df1$elapsed.time == '60', ]
test <- test[test$tk == 'A', ]
test <- test[test$treat == 'DFC', ]
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
# DFC
ddA <- dA[, c('elapsed.time', 'date.time', 'id', 'treat', 'flux', 'cum.emis')]
ddB <- dB[, c('elapsed.time', 'date.time', 'id', 'treat', 'flux', 'cum.emis')]
ddC_in <- dC_in[, c('elapsed.time', 'date.time', 'treat', 'id', 'flux', 'cum.emis')]
ddC_th <- dC_th[, c('elapsed.time', 'date.time', 'treat', 'id', 'flux', 'cum.emis')]
# Add trial keys and names for plots
ddA$tk <- 'A'; ddB$tk <- 'B'; ddC_in$tk <- 'C'; ddC_th$tk <- 'C';
# Add application method
ddA$app.meth <- 'TH'; ddB$app.meth <- 'TH'; ddC_th$app.meth <- 'TH'; ddC_in$app.meth <- 'IN';
# combining
dd <- rbind(ddA, ddB, ddC_in, ddC_th)
View(bC_th)
# precipitation data
pre <- read.xlsx('../data/temp.xlsx')
View(pre)
# precipitation data
pre <- read.xlsx('../data/temp.xlsx')
# precipitation data
pre <- read.table('../data/temp.txt', header = TRUE)
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
w1 <- data.frame(elapsed.time = dA[, c('elapsed.time')], airT = dA[, c('temp')], WS = '', tk = 'A', date.time = dA[, c('date.time')])
w4 <- data.frame(elapsed.time = bbw[, c('elapsed.time')], airT = bbw[, c('airT')], WS = bbw[, c('WS')], tk = bbw[, c('tk')], date.time = bbw[, c('date.time')])
bw2 <- bbw[bbw$tk == 'B', ]
w2 <- data.frame(elapsed.time = bw2[, c('elapsed.time')], airT = bw2[, c('airT')], WS = bw2[, c('WS')], tk = 'B')
bw3 <- bbw[bbw$tk == 'C', ]
w3 <- data.frame(elapsed.time = bw3[, c('elapsed.time')], airT = bw3[, c('airT')], WS = bw3[, c('WS')], tk = 'C')
w2 <- data.frame(elapsed.time = bbw[, c('elapsed.time')], airT = bbw[, c('airT')], WS = bbw[, c('WS')], tk = bbw[, c('tk')], date.time = bbw[, c('date.time')])
weather <- rbind(w1, w2)
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
weather.test <- right_join(weather, perc, by = 'date.time')
weather.test <- right_join(weather, pre, by = 'date.time')
pre$date.time <- paste(pre$date, pre$time)
weather.test <- right_join(weather, pre, by = 'date.time')
weather.test <- left_join(weather, pre, by = 'date.time')
View(weather.test)
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
w1 <- data.frame(elapsed.time = dA[, c('elapsed.time')], airT = dA[, c('temp')], WS = '', tk = 'A', date.time = dA[, c('date.time')])
w2 <- data.frame(elapsed.time = bbw[, c('elapsed.time')], airT = bbw[, c('airT')], WS = bbw[, c('WS')], tk = bbw[, c('tk')], date.time = bbw[, c('date.time')])
weather <- rbind(w1, w2)
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
pre$date.time <- paste(pre$date, pre$time)
weather.test <- left_join(weather, pre, by = 'date.time')
View(weather.test)
weather$date.time <- round_date(weather$date.time, '1 hour')
weather$date.time <- format(weather$date.time, format='%d-%m-%Y %H:%M')
weather$date.time <- round_date(weather$date.time, '1 hour')
weather$date.time <- strptime(weather$date.time, format='%d-%m-%Y %H:%M')
weather$date.time <- round_date(weather$date.time, '1 hour')
weather <- rbind(w1, w2)
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
weather$date.time <- strptime(weather$date.time, format='%d-%m-%Y %H:%M')
w1 <- data.frame(elapsed.time = dA[, c('elapsed.time')], airT = dA[, c('temp')], WS = '', tk = 'A', date.time = dA[, c('date.time')])
w2 <- data.frame(elapsed.time = bbw[, c('elapsed.time')], airT = bbw[, c('airT')], WS = bbw[, c('WS')], tk = bbw[, c('tk')], date.time = bbw[, c('date.time')])
weather <- rbind(w1, w2)
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
weather <- pivot_longer(weather, 2:3, names_to = 'what', values_to = 'num')
View(weather)
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
### DFC data
dA <- read.csv('../data/expA_221217.csv', sep = ';')
dB <- read.csv('../data/expB_221217.csv', sep = ';')
dC_in <- read.csv('../data/expC_IN_221217.csv')
dC_th <- read.csv('../data/expC_TH_221217.csv')
### bLS data
bB <- read.table('../data/DFC_1_results_16_12_2022.txt', header = TRUE, fill = TRUE)
bC_in <- read.table('../data/DFC_2_east_results_16_12_2022.txt', header = TRUE, fill = TRUE)
bC_th <- read.table('../data/DFC_2_west_results_16_12_2022.txt', header = TRUE, fill = TRUE)
### soil and slurry data
sl <- read.xlsx('../data/slurry_soil.xlsx', sheet = 1)
so <- read.xlsx('../data/slurry_soil.xlsx', sheet = 2)
# precipitation data
pre <- read.table('../data/temp.txt', header = TRUE)
### temperature sensor data
dtA <- read.csv('../data/temp_log_A.csv', sep = ';')
dtB <- read.csv('../data/temp_log_B.csv', sep = ';')
dtC <- read.csv('../data/temp_log_C.csv', sep = ';')
dtD <- read.csv('../data/temp_log_D.csv', sep = ';')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
w1 <- data.frame(elapsed.time = dA[, c('elapsed.time')], airT = dA[, c('temp')], WS = '', tk = 'A', date.time = dA[, c('date.time')])
w2 <- data.frame(elapsed.time = bbw[, c('elapsed.time')], airT = bbw[, c('airT')], WS = bbw[, c('WS')], tk = bbw[, c('tk')], date.time = bbw[, c('date.time')])
weather <- rbind(w1, w2)
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
weather <- pivot_longer(weather, 2:3, names_to = 'what', values_to = 'num')
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
w1 <- data.frame(elapsed.time = dA[, c('elapsed.time')], airT = dA[, c('temp')], WS = '', tk = 'A')
w2 <- data.frame(elapsed.time = bbw[, c('elapsed.time')], airT = bbw[, c('airT')], WS = bbw[, c('WS')], tk = bbw[, c('tk')])
weather <- rbind(w1, w2)
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
weather <- pivot_longer(weather, 2:3, names_to = 'what', values_to = 'num')
weather <- rbind(weather, pre)
source('mearge.R')
df1$app.meth <- mapvalues(df1$app.meth, from = 'TH', to = 'Trailing hose')
df2$app.meth <- mapvalues(df2$app.meth, from = 'TH', to = 'Trailing hose')
df1$app.meth <- mapvalues(df1$app.meth, from = 'IN', to = 'Injection')
df2$app.meth <- mapvalues(df2$app.meth, from = 'IN', to = 'Injection')
in1 <- factor(interaction(df1$app.meth, df1$treat))
in2 <- factor(interaction(df2$app.meth, df2$treat))
# Flux
ggplot(df1, aes(elapsed.time, flux, color = in1)) +
geom_point() +
geom_line(aes(group = interaction(tk, app.meth, id))) +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
scale_color_brewer(palette = 'Set1') +
ylab(expression(paste(NH[3]-N, '   flux [g  ',  min^-1, ' ', m^-2, ']'))) +
xlab('Time after slurry application [hours]') +
theme(legend.position = 'bottom', legend.title = element_blank())
ggplot(df2, aes(elapsed.time, flux.mn, color = in2, fill = in2)) +
geom_point() +
geom_line(aes(group = in2)) +
geom_ribbon(aes(ymin = flux.mn - flux.sd, ymax = flux.mn + flux.sd, group = in2), alpha = 0.3, color = NA) +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
scale_color_brewer(palette = 'Set1') + scale_fill_brewer(palette = 'Set1') +
ylab(expression(paste(NH[3]-N, '   flux [g  ',  min^-1, ' ', m^-2, ']'))) +
xlab('Time after slurry application [hours]') +
theme(legend.position = 'bottom', legend.title = element_blank())
# Weather
weather$what <- mapvalues(weather$what, from = 'airT', to = 'Temperature')
weather$what <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
weather$what <- mapvalues(weather$what, from = 'prec', to = 'Precipitation')
weather <- weather[weather$elapsed.time <= 120, ]
ggplot(na.omit(weather), aes(elapsed.time, num, color = what)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C] / Wind speed [ m ", s^-1, ']'))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggsave2x('../plots-field-trials/weather', height = 3, width = 7)
ggplot(na.omit(weather), aes(elapsed.time, num, color = what)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
scale_color_brewer(palette = 'Set1') +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C] / Wind speed [ m ", s^-1, ']'))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggsave2x('../plots-field-trials/weather', height = 3, width = 7)
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('packages.R')
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('packages.R')
# reading in data, ordering and adding elapse.time
dat <- read.table('../data/recovery of NH3.txt', header = TRUE, fill = TRUE)
# reading in data, ordering and adding elapse.time
dat <- read.table('../data/recovery.txt', header = TRUE, fill = TRUE)
dat$date.time <- paste(dat$DATE, dat$TIME)
dat$date.time<-ymd_hms(dat$date.time)
dat$date.time <- dat$date.time
dat$elapsed.time <- difftime(dat$date.time, min(dat$date.time), units = 'mins')
# first view:
ggplot(dat, aes(elapsed.time, NH3)) + geom_point() # all three replicates
ggplot(dat, aes(elapsed.time, NH3)) + geom_point() + xlim(2.5, 4) + ylim(0, 50) # background
ggplot(dat, aes(elapsed.time, NH3)) + geom_point() + xlim(4, 44.5) # test #1
ggplot(dat, aes(elapsed.time, NH3)) + geom_point() + xlim(47, 73) # test #2
ggplot(dat, aes(elapsed.time, NH3)) + geom_point() + xlim(78.7, 99.5) # test #3
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # L * atm * K^-1 * mol^-1
M.N <- 14.006 # g * mol^-1
air.flow <- 50 * 60 # L min^-1
temp <- 18 + 273.15 # K
bg <- mean(dat[dat$elapsed.time >= 2.5 & dat$elapsed.time <= 4, ]$NH3)
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * temp) * (dat$NH3 - bg) * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.N * min^-1
dat$flux <- (dat$n * M.N * air.flow)
# assigning test #
dat$exp <- 'A'
dat$inlet <- 'A'
dat[dat$elapsed.time > 4 & dat$elapsed.time < 44.5, ]$exp <- 1
dat[dat$elapsed.time > 47 & dat$elapsed.time < 73, ]$exp <- 2
dat[dat$elapsed.time > 78.7 & dat$elapsed.time < 99.5, ]$exp <- 3
# removing data not used
dat <- dat[! dat$exp == 'A', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0; dat$Vid[1:3] <- c('V1', 'V2', 'V3'); new.names <- dat$Vid[1:3]
splitdat <- split(dat, f = dat$exp)
for (i in 1:3){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='mins')
new.dat <- rbind(new.dat,i)
}
dat <- new.dat
# Calculating the emissions in the chamber with the trapezoid rule:
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$elapsed.time.cal <- rollapplyr(dat$elapsed.time, 2, diff, fill = NA) # time between measuring points
dat[is.na(dat)] = 0 # fixing that the first 'elapsed.time.cal' is NA which will screw up later cal
dat$flux.time <- dat$flux.tr * dat$elapsed.time.cal  # g.N
dat <- mutate(group_by(dat, exp), cum.emis = cumsum(flux.time))
dat$cum.emis.Picarro <- 100
dat[dat$exp == 1, ]$cum.emis.Picarro <- tail(dat[dat$exp == 1, ]$cum.emis, n = 1)
dat[dat$exp == 2, ]$cum.emis.Picarro <- tail(dat[dat$exp == 2, ]$cum.emis, n = 1)
dat[dat$exp == 3, ]$cum.emis.Picarro <- tail(dat[dat$exp == 3, ]$cum.emis, n = 1)
dat$conc.end <- 100
dat[dat$exp == 1, ]$conc.end <- mean(c(14, 15, 15)) / 10 # original label: B samples
dat[dat$exp == 2, ]$conc.end <- mean(c(19, 20, 20)) / 10 # original label: C samples
dat[dat$exp == 3, ]$conc.end <- mean(c(21, 21, 21)) / 10 # original label: D samples
dat$conc.start <- mean(c(36, 36, 35)) / 10 # original label: A samples
# Difference (starting volume was 51.5 mL of each solution (50 mL NA4Cl + 1 mL NaOH + 0.5 mL H2SO4))
dat$cum.emis.sample <- dat$conc.start * 0.0515 - dat$conc.end * 0.0515
# COMPARISON OF NUMBERS:
dat$recovery <- dat$cum.emis.Picarro / dat$cum.emis.sample * 100
View(dat)
