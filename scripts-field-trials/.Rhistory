setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('subset_weather.R')
source('mearge.R')
# Weather
ggplot(weather, aes(elapsed.time, airT)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
# Weather
ggplot(weather, aes(elapsed.time, airT)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
View(weather)
# Weather
ggplot(na.omit(weather), aes(elapsed.time, airT)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
weather$tk <- as.factor(weather$tk)
ggplot(na.omit(weather), aes(elapsed.time, airT)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
bw2 <- bbw[bbw$tk == 'B', ]
w2 <- data.frame(elapsed.time = bW2[, c('elapsed.time')], airT = bW2[, c('airT')], WS = bW2[, c('WS')], tk = 'B')
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('subset_weather.R')
source('mearge.R')
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
w1 <- data.frame(elapsed.time = dA[, c('elapsed.time')], airT = dA[, c('temp')], WS = '', tk = 'A')
bw2 <- bbw[bbw$tk == 'B', ]
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('subset_weather.R')
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('subset_weather.R')
source('mearge.R')
ggplot(na.omit(weather), aes(elapsed.time, airT)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggplot(na.omit(weather), aes(elapsed.time, airT)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggplot(na.omit(weather), aes(elapsed.time, airT)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
pivot_longer(weather, 2:3, naems_to = 'what', values_to = 'num')
??pivot_longer
library(tidyr)
pivot_longer(weather, 2:3, naems_to = 'what', values_to = 'num')
weather$airT <- as.numeric(weather$airT)
weather$WS <- as.numeric(weather$WS)
pivot_longer(weather, 2:3, naems_to = 'what', values_to = 'num')
pivot_longer(weather, 2:3, names_to = 'what', values_to = 'num')
weather <- pivot_longer(weather, 2:3, names_to = 'what', values_to = 'num')
View(weather)
ggplot(na.omit(weather), aes(elapsed.time, num, color = what)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
weather <- mapvalues(weather$what, from = 'airT', to = 'Temperature')
weather <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
weather <- mapvalues(weather$what, from = 'airT', to = 'Temperature')
weather <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
ggplot(na.omit(weather), aes(elapsed.time, num, color = what)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('subset_weather.R')
source('mearge.R')
weather$airT <- mapvalues(weather$what, from = 'airT', to = 'Temperature')
weather$WS <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
ggplot(na.omit(weather), aes(elapsed.time, num, color = what)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggplot(weather, aes(elapsed.time, num, color = what)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
weather$WS <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
weather$what <- mapvalues(weather$what, from = 'airT', to = 'Temperature')
weather$what <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
ggplot(weather, aes(elapsed.time, num, color = what)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C]"))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggplot(weather, aes(elapsed.time, num, color = what)) +
geom_point() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C] / Wind speed [ m ", s^-1, ']'))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggplot(weather, aes(elapsed.time, num, color = what)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C] / Wind speed [ m ", s^-1, ']'))) +
theme(legend.position = 'bottom', legend.title = element_blank())
weather <- weather[weather$elapsed.time <= 120, ]
ggplot(weather, aes(elapsed.time, num, color = what)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C] / Wind speed [ m ", s^-1, ']'))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggsave2x('../plots-field-trials/weather', height = 3, width = 7)
ggplot(na.omit(weather), aes(elapsed.time, num, color = what)) +
geom_line() +
facet_wrap(~ tk, scale = 'free') +
theme_bw() +
xlab('Time after slurry application [hours]') +
ylab(expression(paste("Temperature [ ",degree,"C] / Wind speed [ m ", s^-1, ']'))) +
theme(legend.position = 'bottom', legend.title = element_blank())
ggsave2x('../plots-field-trials/weather', height = 3, width = 7)
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('subset_weather.R')
source('mearge.R')
source('plot.R')
View(bb)
View(dd)
# temperature sensor data
senA <- read.xlsx('../data/temp_log_A.xlsx')
library(xlsx)
# temperature sensor data
senA <- read.xlsx('../data/temp_log_A.xlsx')
library(openxlsx)
# temperature sensor data
senA <- read.xlsx('../data/temp_log_A.xlsx')
senB <- read.xlsx('../data/temp_log_B.xlsx')
senC <- read.xlsx('../data/temp_log_C.xlsx')
senD <- read.xlsx('../data/temp_log_D.xlsx')
# temperature sensor data
dtA <- read.xlsx('../data/temp_log_A.xlsx')
dtB <- read.xlsx('../data/temp_log_B.xlsx')
dtC <- read.xlsx('../data/temp_log_C.xlsx')
dtD <- read.xlsx('../data/temp_log_D.xlsx')
dt <- rbind(dtA, dtB, dtC, dtD)
# temperature sensors
# adding exp id
dt$tk <- '1'
# temperature sensors
# adding exp id
dt$date.time <- paste(dt$date, dt$time)
dt$tk <- '1'
# temperature sensor data
dtA <- read.xlsx('../data/temp_log_A.xlsx')
# temperature sensor data
dtA <- read.table('../data/temp_log_A.txt', header = TRUE)
# temperature sensor data
dtA <- read.csv('../data/temp_log_A.csv')
# temperature sensor data
dtA <- read.csv('../data/temp_log_A.csv', sep = ';')
# temperature sensor data
dtA <- read.csv('../data/temp_log_A.csv', sep = ';')
dtB <- read.csv('../data/temp_log_B.csv', sep = ';')
dtC <- read.csv('../data/temp_log_C.csv', sep = ';')
dtD <- read.csv('../data/temp_log_D.csv', sep = ';')
dt <- rbind(dtA, dtB, dtC, dtD)
# temperature sensors
# adding exp id
dt$date.time <- paste(dt$date, dt$time)
dt$tk <- '1'
dt[dt$elapsed.time >= '2022-11-16 09:42:00' & elapsed.time <= '2022-11-21 09:42:00']$tk <- 'B'
dt[date.time >= '2022-11-16 09:42:00' & date.time <= '2022-11-21 09:42:00']$tk <- 'B'
dt[dt$date.time >= '2022-11-16 09:42:00' & dt$date.time <= '2022-11-21 09:42:00']$tk <- 'B'
dt[dt$date.time >= '2022-11-16 09:42:00' & dt$date.time <= '2022-11-21 09:42:00', ]$tk <- 'B'
View(dt)
dt[dt$date.time >= '2022-11-24 11:18:00' & dt$date.time <= '2022-11-29 11:18:00', ]$tk <- 'C'
dt <- dt[! dt$tk == '1', ]
# temperature sensor data
dtA <- read.csv('../data/temp_log_A.csv', sep = ';')
dtB <- read.csv('../data/temp_log_B.csv', sep = ';')
dtC <- read.csv('../data/temp_log_C.csv', sep = ';')
dtD <- read.csv('../data/temp_log_D.csv', sep = ';')
dtA$id <- 'A'; dtB$id <- 'B'; dtC$id <- 'C'; dtD$id <- 'D'
dt <- rbind(dtA, dtB, dtC, dtD)
dt$tk <- '1'
dt$date.time <- paste(dt$date, dt$time)
dt[dt$date.time >= '2022-11-16 09:42:00' & dt$date.time <= '2022-11-21 09:42:00', ]$tk <- 'B'
dt[dt$date.time >= '2022-11-24 11:18:00' & dt$date.time <= '2022-11-29 11:18:00', ]$tk <- 'C'
dt <- dt[! dt$tk == '1', ]
# temperature sensors
ggplot(dt, aes(date.time, temp, color = id)) + geom_point()
# temperature sensors
ggplot(dt, aes(date.time, temp, color = id)) + geom_line()
dt$Vid <- 0
dt$Vid[1:4] <- c('V1', 'V2', 'v3', 'v4')
splitdt <- split(dt, f = dt$tk)
new.names <- bb$Vid[1:4]
new.names <- dt$Vid[1:4]
for (i in 1:4){
assign(new.names[i], splitbb[[i]])
}
assign(new.names[i], splitbt[[i]])
assign(new.names[i], splitdt[[i]])
dt$Vid <- 0
dt$Vid[1:4] <- c('V1', 'V2', 'v3', 'v4')
splitdt <- split(dt, f = dt$tk)
new.names <- dt$Vid[1:4]
for (i in 1:4){
assign(new.names[i], splitdt[[i]])
}
bt$fac <- paste(bt$tk, bt$id)
dt$Vid <- 0
dt$Vid[1:4] <- c('V1', 'V2', 'v3', 'v4')
splitdt <- split(dt, f = dt$fac)
dt$fac <- paste(dt$tk, dt$id)
dt$Vid <- 0
dt$Vid[1:4] <- c('V1', 'V2', 'v3', 'v4')
splitdt <- split(dt, f = dt$fac)
new.names <- dt$Vid[1:4]
for (i in 1:4){
assign(new.names[i], splitdt[[i]])
}
z = list(V1, V2, v3, v4)
new.bb = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.bb <- rbind(new.bb,i)
}
dt$fac <- paste(dt$tk, dt$id)
dt$Vid <- 0
dt$Vid[1:4] <- c('V1', 'V2', 'v3', 'v4')
splitdt <- split(dt, f = dt$fac)
new.names <- dt$Vid[1:4]
for (i in 1:4){
assign(new.names[i], splitdt[[i]])
}
z = list(V1, V2, v3, v4)
new.dt = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dt <- rbind(new.dt,i)
}
dt <- new.dt
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) + geom_line()
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw()
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
dtA$id <- 'A'; dtB$id <- 'B'; dtC$id <- 'C'; dtD$id <- 'D'
dt <- rbind(dtA, dtB, dtC, dtD)
dt$tk <- '1'
dt$date.time <- paste(dt$date, dt$time)
dt[dt$date.time >= '2022-11-16 09:42:00' & dt$date.time <= '2022-11-21 09:42:00', ]$tk <- 'B'
dt[dt$date.time >= '2022-11-24 11:18:00' & dt$date.time <= '2022-11-29 11:18:00', ]$tk <- 'C'
dt <- dt[! dt$tk == '1', ]
dt$fac <- paste(dt$tk, dt$id)
dt$Vid <- 0
dt$Vid[1:4] <- c('V1', 'V2', 'v3', 'v4')
splitdt <- split(dt, f = dt$fac)
new.names <- dt$Vid[1:4]
for (i in 1:4){
assign(new.names[i], splitdt[[i]])
}
z = list(V1, V2, v3, v4)
new.dt = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dt <- rbind(new.dt,i)
}
dt <- new.dt
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw()
dt <- dt[dt$elapsed.time <= 120, ]
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw()
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
geom_line(data = weather[weather$what = 'Temperature', ], aes(elapsed.time, num))
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
geom_line(data = weather[weather$what = 'Temperature', ], aes(elapsed.time, num)) +
facet_wrap(~ tk) +
theme_bw()
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
geom_line(data = weather[weather$what = 'Temperature', ], aes(elapsed.time, num)) +
facet_wrap(~ tk) +
theme_bw()
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
#  geom_line(data = weather[weather$what = 'Temperature', ], aes(elapsed.time, num)) +
facet_wrap(~ tk) +
theme_bw()
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
geom_line(data = weather[weather$what = 'Temperature', ], aes(elapsed.time, num)) +
facet_wrap(~ tk) +
theme_bw()
weather[weather$what = 'Temperature', ]
weather[weather$what = 'Temperature']
weather[weather$what == 'Temperature']
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
source('subset_weather.R')
source('mearge.R')
# Weather
weather$what <- mapvalues(weather$what, from = 'airT', to = 'Temperature')
weather$what <- mapvalues(weather$what, from = 'WS', to = 'Wind speed')
weather <- weather[weather$elapsed.time <= 120, ]
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
geom_line(weather[weather$what == 'Temperature'], aes(elapsed.time, num)) +
facet_wrap(~ tk) +
theme_bw()
weather[weather$what == 'Temperature']
weather[weather$what == 'Temperature']
weather[weather$what == 'Temperature', ]
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
geom_line(weather[weather$what == 'Temperature', ], aes(elapsed.time, num)) +
facet_wrap(~ tk) +
theme_bw()
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw() +
geom_line(weather[weather$what == 'Temperature', ], aes(elapsed.time, num))
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw() +
geom_point(weather[weather$what == 'Temperature', ], aes(elapsed.time, num))
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw() +
geom_point(na.omit(weather[weather$what == 'Temperature', ]), aes(elapsed.time, num))
# temperature sensors
ggplot() +
geom_line(dt, aes(elapsed.time, temp, color = id)) +
facet_wrap(~ tk) +
theme_bw() +
geom_point(na.omit(weather[weather$what == 'Temperature', ]), aes(elapsed.time, num))
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw() +
geom_point(weather, aes(elapsed.time, num))
# temperature sensors
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw() +
geom_point(data = weather, aes(elapsed.time, num))
# temperature sensors
dt$elapsed.time <- as.numeric(dt$elapsed.time)
ggplot(dt, aes(elapsed.time, temp, color = id)) +
geom_line() +
facet_wrap(~ tk) +
theme_bw() +
geom_point(data = weather, aes(elapsed.time, num))
ggplot() +
geom_line(dt, aes(elapsed.time, temp, color = id)) +
facet_wrap(~ tk) +
theme_bw() +
geom_point(data = weather, aes(elapsed.time, num))
ggplot() +
geom_line(dt, aes(elapsed.time, temp, color = id)) +
facet_wrap(~ tk) +
theme_bw() +
geom_point(data = weather, aes(elapsed.time, num, color = 'black'))
