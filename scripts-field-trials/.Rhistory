dat$treat <- mapvalues(dat$treat, from = c('1', '5', '6'), to = c(rep('ureaINH', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 4'))
dat$treat <- mapvalues(dat$treat, from = c('9'), to = c('bg tunnel 6'));
dat$elapsed.time <- as.numeric(dat$elapsed.time)
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 4'| dat$treat == 'bg tunnel 6', ]
# outlet data
dat <- dat[dat$treat == 'urea' | dat$treat == 'ureaINH', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 4'| dat.bg$treat == 'bg tunnel 6', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat <- dat[complete.cases(dat),]
# ########################################################################################
# #### DETECTION LIMIT ###################################################################
# # ########################################################################################
# #
# dat$id <- as.character(dat$id)
# # g <- ggplot(dat, aes(elapsed.time, NH3.corr, color = treat)) + geom_point()
# # print(g)
#
# dat$DL <- dat$NH3.bg.sd * 3
#
# dat$NH3.corr[dat$NH3.corr <= dat$DL] <- 0
#
# dat <- dat[, c(1:8)]
########################################################################################
#### FLUX CALCULATIONS #################################################################
########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/temp.txt',
fill = TRUE, col.names = header)
weather <- weather[- 1, ]
# for some reason the dates and time messed up when copy pasting it from the original file. The date.time is shifted by
weather$date.time.weather <- paste(weather$date, weather$time)
weather$date.time.weather <- as.POSIXct(strptime(weather$date.time.weather, '%d-%m-%Y %H:%M'))
weather$date.time.weather <- weather$date.time.weather + 69*24*60*60 + 10*60*60 + 21*60
#weather$date.time.weather <- as.character(weather$date.time.weather)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hours')
#dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.NH3 <- 14.006 # g * mol^-1
air.flow <- 20.16 * 60 # L * s^-1 ### Used AER = 15
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.N * min^-1 * m^-2
dat$flux <- (dat$n * M.NH3 * air.flow) / A.frame
# From g.N * min^-1 * m^-2 to myg.N * s^-1 * m^-2
dat$flux <- dat$flux * 10^6 * 60^-1
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time
# last point * 9 valves * 8 min * 60 sec
dat$flux.time <- dat$flux.tr * 9 * 8 * 60
dat <- dat[dat$elapsed.time <= 380, ]
###### CUMULATIVE EMISSION
# cum.emis. 80min is calculated for the boxplots
dat <- mutate(group_by(na.omit(dat), id, treat), cum.emis = cumsum(flux.time))
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
dat.end <- dat.summ[dat.summ$elapsed.time == 380, ]
# converting from myg-N * m^-2 to kg-N * ha^-1
dat.summ$cum.emis.mn * 10^-9 * 10^4
dat.summ$cum.emis.sd * 10^-9 * 10^4
# converting from myg-N * m^-2 to kg-N * ha^-1
dat.summ$cum.emis.mn <- dat.summ$cum.emis.mn * 10^-9 * 10^4
dat.summ$cum.emis.sd <- dat.summ$cum.emis.sd * 10^-9 * 10^4
dat.fluxtime <- dat[dat$id == '2', c(1:5)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
ggplot(dat.summ, aes(elapsed.time, cum.emis.mn, color = treat)) + geom_point()
g <- ggplot(dat.end, aes(treat, cum.emis.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5)
g <- g + geom_errorbar(aes(ymin = cum.emis.mn - cum.emis.sd, ymax = cum.emis.mn + cum.emis.sd), width = 0.3, size = 0.5)
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, shape = treat)) + geom_point()
print(g)
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
ggplot(dat.summ, aes(elapsed.time, cum.emis.mn, color = treat)) + geom_point()
6 * 10^-3 * 10^4
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, shape = treat)) + geom_point()
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, shape = treat)) + geom_point() + geom_line()
print(g)
g <- ggplot(dat.end, aes(treat, cum.emis.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5)
g <- g + geom_errorbar(aes(ymin = cum.emis.mn - cum.emis.sd, ymax = cum.emis.mn + cum.emis.sd), width = 0.3, size = 0.5)
print(g)
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
# converting from myg-N * m^-2 to kg-N * ha^-1
dat.summ$cum.emis.mn <- dat.summ$cum.emis.mn * 10^-9 * 10^4
dat.summ$cum.emis.sd <- dat.summ$cum.emis.sd * 10^-9 * 10^4
dat.end <- dat.summ[dat.summ$elapsed.time == 380, ]
dat.fluxtime <- dat[dat$id == '2', c(1:5)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
ggplot(dat.summ, aes(elapsed.time, cum.emis.mn, color = treat)) + geom_point()
g <- ggplot(dat.end, aes(treat, cum.emis.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5)
g <- g + geom_errorbar(aes(ymin = cum.emis.mn - cum.emis.sd, ymax = cum.emis.mn + cum.emis.sd), width = 0.3, size = 0.5)
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, shape = treat)) + geom_point() + geom_line()
print(g)
dat <- data
dat <- dat[-c(1:10), ]
# datA <- dat
# datA$elapsed.time <- difftime(datA$date.time, min(datA$date.time), units='hour')
#
# datA$id <- as.character(datA$MPVPosition)
# datA <- datA[datA$id == '1' | datA$id == '2' | datA$id == '3' | datA$id == '4' | datA$id == '5' | datA$id == '6' | datA$id == '7' |
#              datA$id == '8' | datA$id == '9' , ]
# ggplot(datA, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(20,22)
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:9] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:9]
for (i in 1:9){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('2', '4', '8'), to = c(rep('urea', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '5', '6'), to = c(rep('ureaINH', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 4'))
dat$treat <- mapvalues(dat$treat, from = c('9'), to = c('bg tunnel 6'));
dat$elapsed.time <- as.numeric(dat$elapsed.time)
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 4'| dat$treat == 'bg tunnel 6', ]
# outlet data
dat <- dat[dat$treat == 'urea' | dat$treat == 'ureaINH', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 4'| dat.bg$treat == 'bg tunnel 6', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat <- dat[complete.cases(dat),]
# ########################################################################################
# #### DETECTION LIMIT ###################################################################
# # ########################################################################################
#
dat$id <- as.character(dat$id)
# g <- ggplot(dat, aes(elapsed.time, NH3.corr, color = treat)) + geom_point()
# print(g)
dat$DL <- dat$NH3.bg.sd * 3
dat$NH3.corr[dat$NH3.corr <= dat$DL] <- 0
dat <- dat[, c(1:8)]
########################################################################################
#### FLUX CALCULATIONS #################################################################
########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/temp.txt',
fill = TRUE, col.names = header)
weather <- weather[- 1, ]
# for some reason the dates and time messed up when copy pasting it from the original file. The date.time is shifted by
weather$date.time.weather <- paste(weather$date, weather$time)
weather$date.time.weather <- as.POSIXct(strptime(weather$date.time.weather, '%d-%m-%Y %H:%M'))
weather$date.time.weather <- weather$date.time.weather + 69*24*60*60 + 10*60*60 + 21*60
#weather$date.time.weather <- as.character(weather$date.time.weather)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hours')
#dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.NH3 <- 14.006 # g * mol^-1
air.flow <- 20.16 * 60 # L * s^-1 ### Used AER = 15
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.N * min^-1 * m^-2
dat$flux <- (dat$n * M.NH3 * air.flow) / A.frame
# From g.N * min^-1 * m^-2 to myg.N * s^-1 * m^-2
dat$flux <- dat$flux * 10^6 * 60^-1
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time
# last point * 9 valves * 8 min * 60 sec
dat$flux.time <- dat$flux.tr * 9 * 8 * 60
dat <- dat[dat$elapsed.time <= 380, ]
###### CUMULATIVE EMISSION
# cum.emis. 80min is calculated for the boxplots
dat <- mutate(group_by(na.omit(dat), id, treat), cum.emis = cumsum(flux.time))
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
# converting from myg-N * m^-2 to kg-N * ha^-1
dat.summ$cum.emis.mn <- dat.summ$cum.emis.mn * 10^-9 * 10^4
dat.summ$cum.emis.sd <- dat.summ$cum.emis.sd * 10^-9 * 10^4
dat.end <- dat.summ[dat.summ$elapsed.time == 380, ]
dat.fluxtime <- dat[dat$id == '2', c(1:5)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
ggplot(dat.summ, aes(elapsed.time, cum.emis.mn, color = treat)) + geom_point()
g <- ggplot(dat.end, aes(treat, cum.emis.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5)
ggplot(dat.summ, aes(elapsed.time, cum.emis.mn, color = treat)) + geom_point()
g <- ggplot(dat.end, aes(treat, cum.emis.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5)
g <- g + geom_errorbar(aes(ymin = cum.emis.mn - cum.emis.sd, ymax = cum.emis.mn + cum.emis.sd), width = 0.3, size = 0.5)
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, shape = treat)) + geom_point() + geom_line()
print(g)
View(dat.summ)
# Data frame for Andreas:
WT_withDL <- dat.summ[, c(1, 3:6, 10)]
View(WT_withDL)
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# reading in data, ordering and adding elapse.time
# correct that there is no number 13, everything got shiftet by mistake
org1 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_4.txt', header = TRUE, fill = TRUE)
org5 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_5.txt', header = TRUE, fill = TRUE)
org6 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_6.txt', header = TRUE, fill = TRUE)
org7 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_7.txt', header = TRUE, fill = TRUE)
org8 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_8.txt', header = TRUE, fill = TRUE)
org9 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_9.txt', header = TRUE, fill = TRUE)
org10 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_10.txt', header = TRUE, fill = TRUE)
org11 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_11.txt', header = TRUE, fill = TRUE)
org12 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_12.txt', header = TRUE, fill = TRUE)
org14 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_14.txt', header = TRUE, fill = TRUE)
org15 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_15.txt', header = TRUE, fill = TRUE)
org16 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_16.txt', header = TRUE, fill = TRUE)
org17 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_17.txt', header = TRUE, fill = TRUE)
org18 <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/NH3 data/NH3_Thunen_18.txt', header = TRUE, fill = TRUE)
data <- rbind(org1, org2, org3, org4, org5, org6, org7, org8, org9, org10,
org11, org12, org14, org15, org16, org17, org18)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time <- ymd_hms(data$date.time)
dat <- data
dat <- dat[-c(1:10), ]
# datA <- dat
# datA$elapsed.time <- difftime(datA$date.time, min(datA$date.time), units='hour')
#
# datA$id <- as.character(datA$MPVPosition)
# datA <- datA[datA$id == '1' | datA$id == '2' | datA$id == '3' | datA$id == '4' | datA$id == '5' | datA$id == '6' | datA$id == '7' |
#              datA$id == '8' | datA$id == '9' , ]
# ggplot(datA, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(20,22)
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:9] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:9]
for (i in 1:9){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
# cropping data:
dat <- new.dat[,c(19, 26:27, 29)]
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('2', '4', '8'), to = c(rep('urea', 3)))
dat$treat <- mapvalues(dat$treat, from = c('1', '5', '6'), to = c(rep('ureaINH', 3)))
dat$treat <- mapvalues(dat$treat, from = c('3'), to = c('bg tunnel 2'));
dat$treat <- mapvalues(dat$treat, from = c('7'), to = c('bg tunnel 4'))
dat$treat <- mapvalues(dat$treat, from = c('9'), to = c('bg tunnel 6'));
dat$elapsed.time <- as.numeric(dat$elapsed.time)
# background data:
dat.bg <- dat[dat$treat == 'bg tunnel 2' | dat$treat == 'bg tunnel 4'| dat$treat == 'bg tunnel 6', ]
# outlet data
dat <- dat[dat$treat == 'urea' | dat$treat == 'ureaINH', ]
########################################################################################
#### TREATMENT OF BACKGROUNDS ##########################################################
########################################################################################
# plotting all background datapoints (NH3 [ppb] vs time [h])
ggplot(dat.bg, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# As the backgrounds are very similar an average of the background tube for tunnel 2, 5 and 8 is used as the back
# ground value.
# Picking out the data
dat.bg <- dat.bg[dat.bg$treat == 'bg tunnel 2' | dat.bg$treat == 'bg tunnel 4'| dat.bg$treat == 'bg tunnel 6', ]
# calculating the average and sd
dat.bg.summ <- ddply(dat.bg, c('elapsed.time'), summarise, NH3.bg.mn = mean(NH3_30s), NH3.bg.sd = sd(NH3_30s))
# joining the datasets:
dat <- full_join(dat.bg.summ, dat, by = 'elapsed.time')
# Subtracting the background values from the 30 second average values
dat$NH3.corr <- dat$NH3_30s - dat$NH3.bg.mn
dat <- dat[complete.cases(dat),]
# ########################################################################################
# #### DETECTION LIMIT ###################################################################
# # ########################################################################################
# #
# dat$id <- as.character(dat$id)
# # g <- ggplot(dat, aes(elapsed.time, NH3.corr, color = treat)) + geom_point()
# # print(g)
#
# dat$DL <- dat$NH3.bg.sd * 3
#
# dat$NH3.corr[dat$NH3.corr <= dat$DL] <- 0
#
# dat <- dat[, c(1:8)]
########################################################################################
#### FLUX CALCULATIONS #################################################################
########################################################################################
# reading in temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/temp.txt',
fill = TRUE, col.names = header)
weather <- weather[- 1, ]
# for some reason the dates and time messed up when copy pasting it from the original file. The date.time is shifted by
weather$date.time.weather <- paste(weather$date, weather$time)
weather$date.time.weather <- as.POSIXct(strptime(weather$date.time.weather, '%d-%m-%Y %H:%M'))
weather$date.time.weather <- weather$date.time.weather + 69*24*60*60 + 10*60*60 + 21*60
#weather$date.time.weather <- as.character(weather$date.time.weather)
# round date.time in data to fit with weather
dat$date.time.weather <- round_date(dat$date.time, '1 hours')
#dat$date.time.weather <- as.character(format(dat$date.time.weather, format='%d-%m-%Y %H:%M'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
A.frame <- 0.293 * 0.674 #m^2
M.NH3 <- 14.006 # g * mol^-1
air.flow <- 20.16 * 60 # L * s^-1 ### Used AER = 15
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.N * min^-1 * m^-2
dat$flux <- (dat$n * M.NH3 * air.flow) / A.frame
# From g.N * min^-1 * m^-2 to myg.N * s^-1 * m^-2
dat$flux <- dat$flux * 10^6 * 60^-1
# rearanging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time
# last point * 9 valves * 8 min * 60 sec
dat$flux.time <- dat$flux.tr * 9 * 8 * 60
dat <- dat[dat$elapsed.time <= 380, ]
###### CUMULATIVE EMISSION
# cum.emis. 80min is calculated for the boxplots
dat <- mutate(group_by(na.omit(dat), id, treat), cum.emis = cumsum(flux.time))
###### FLUX
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
# converting from myg-N * m^-2 to kg-N * ha^-1
dat.summ$cum.emis.mn <- dat.summ$cum.emis.mn * 10^-9 * 10^4
dat.summ$cum.emis.sd <- dat.summ$cum.emis.sd * 10^-9 * 10^4
dat.end <- dat.summ[dat.summ$elapsed.time == 380, ]
dat.fluxtime <- dat[dat$id == '2', c(1:5)]
dat.summ <- left_join(dat.summ, dat.fluxtime, by = 'elapsed.time')
ggplot(dat.summ, aes(elapsed.time, cum.emis.mn, color = treat)) + geom_point()
g <- ggplot(dat.end, aes(treat, cum.emis.mn, fill = treat)) + geom_bar(stat = 'identity', width = 0.5)
g <- g + geom_errorbar(aes(ymin = cum.emis.mn - cum.emis.sd, ymax = cum.emis.mn + cum.emis.sd), width = 0.3, size = 0.5)
print(g)
g <- ggplot(dat.summ, aes(elapsed.time, flux.mn, colour = treat, shape = treat)) + geom_point() + geom_line()
print(g)
# Data frame for Andreas:
WT_noDL <- dat.summ[, c(1, 3:6, 10)]
write.xlsx(WT_noDL, file = 'C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/eGylle/ThÃ¼nen/WT_noDL.xlsx')
View(WT_withDL)
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
source('subset_weather.R')
source('mearge.R')
# tk = A
statA <- df1[df1$tk == 'A' & df1$elapsed.time == 60 & df1$treat == 'DFC', ]
statB <- df1[df1$tk == 'B' & df1$elapsed.time == 118 & df1$treat == 'DFC', ]
statC <- df1[df1$tk == 'C' & df1$elapsed.time == 119 & df1$treat == 'DFC' & df1$app.meth == 'TH', ]
stat.dat <- rbind(statA, statB, statC)
stat.dat <- stat.dat[, c('tk', 'id', 'cum.emis', 'cum.emis.perc')]
View(stat.dat)
source('plot.R')
write.csv(stat.dat, '../data/stat_230120.csv')
stat.dat <- stat.dat[, c('tk', 'id', 'cum.emis.perc')]
write.csv(stat.dat, '../data/stat_230120.csv')
statA <- df1[df1$tk == 'A' & df1$elapsed.time == 60 & df1$treat == 'DFC', ]
statB <- df1[df1$tk == 'B' & df1$elapsed.time == 118 & df1$treat == 'DFC', ]
statC <- df1[df1$tk == 'C' & df1$elapsed.time == 119 & df1$treat == 'DFC', ]
stat.dat <- rbind(statA, statB, statC)
stat.dat <- stat.dat[, c('tk', 'id', 'cum.emis.perc')]
write.csv(stat.dat, '../data/stat_230120.csv')
# tk = A
statA <- df1[df1$tk == 'A' & df1$elapsed.time == 60 & df1$treat == 'DFC', ]
statB <- df1[df1$tk == 'B' & df1$elapsed.time == 118 & df1$treat == 'DFC', ]
statC <- df1[df1$tk == 'C' & df1$elapsed.time == 119 & df1$treat == 'DFC', ]
stat.dat <- rbind(statA, statB, statC)
stat.dat <- stat.dat[, c('tk', 'id', 'cum.emis.perc', 'app.meth')]
write.csv(stat.dat, '../data/stat_230120.csv')
write.csv(stat.dat, '../data/stat_230120.csv')
View(df1)
# For comparing WT and DFC:
statD <- df1[df1$tk == 'A', ]
View(statD)
statD <- statD[, c('tk', 'id', 'treat', 'elapsed.time', 'flux.perc')]
ggplot(statD, aes(elapsed.time, flux.perc, color = 'id', shape = 'treat')) + geom_point()
ggplot(statD, aes(elapsed.time, flux.perc, color = id, shape = treat)) + geom_point()
write.csv(statD, '../data/statVar_230120.csv')
# adding block info
statD$block <- 1
statD$block <- mapvalues(statD$block, from = c(2, 6, 10, 15), to = rep('1', 4))
# adding block info
statD$block <- stadD$id
statD$block <- mapvalues(statD$block, from = c(2, 6, 10, 15), to = rep('1', 4))
# adding block info
statD$block <- stadD$id
# adding block info
statD$block <- statD$id
statD$block <- mapvalues(statD$block, from = c(2, 6, 10, 15), to = rep('1', 4))
statD$block <- mapvalues(statD$block, from = c('2', '6', '10', '15'), to = rep('1', 4))
statD$block <- mapvalues(statD$block, from = c('1', '6', '10', '15'), to = rep('1', 4))
# adding block info
statD$block <- statD$id
statD$block <- mapvalues(statD$block, from = c('1', '6', '10', '15'), to = rep('1', 4))
statD$block <- mapvalues(statD$block, from = c('3', '2', '12', '16'), to = rep('2', 4))
statD$block <- mapvalues(statD$block, from = c('3', '7', '12', '16'), to = rep('2', 4))
statD$block <- mapvalues(statD$block, from = c('5', '9', '13', '17'), to = rep('3', 4))
# For comparing WT and DFC:
statD <- df1[df1$tk == 'A', ]
statD <- statD[, c('tk', 'id', 'treat', 'elapsed.time', 'flux.perc')]
# adding block info
statD$block <- statD$id
statD$block <- mapvalues(statD$block, from = c('1', '6', '10', '15'), to = rep('1', 4))
statD$block <- mapvalues(statD$block, from = c('3', '7', '12', '16'), to = rep('2', 4))
statD$block <- mapvalues(statD$block, from = c('5', '9', '13', '17'), to = rep('3', 4))
ggplot(statD, aes(elapsed.time, flux.perc, color = block, shape = treat)) + geom_point()
write.csv(statD, '../data/statVar_230120.csv')
