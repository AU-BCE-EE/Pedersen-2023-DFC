dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# write.csv(dat, 'C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/GitHub/DC-validation-test-2022/data/test1.csv')
# # Experiment A
# # The dataframe in 'data' added here has undergone filtering and addition of chamber ID/treatment
#
# dat <- read.csv('../data/exp1.csv', header = TRUE, sep = ';')
# dat$id <- as.character(dat$id)
# first look
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# fixing a time bug
dat$elapsed.time[dat$elapsed.time == 9.60] <- 9.59
# background data:
WT.bg <- dat[dat$treat == 'WT bg', ]
DFC.bg <- dat[dat$treat == 'DFC bg', ]
# outlet data:
WT <- dat[dat$treat == 'WT', ]
DFC <- dat[dat$treat == 'DFC', ]
# average background values
WT.bg.summ <- aggregate2(WT.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
DFC.bg.summ <- aggregate2(DFC.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
# joining average background and outlet data
WT <- full_join(WT.bg.summ, WT, by = 'elapsed.time')
DFC <- full_join(DFC.bg.summ, DFC, by = 'elapsed.time')
# subtracting background from outlet data
WT$NH3.corr <- WT$NH3_30s - WT$NH3_30s.bg
DFC$NH3.corr <- DFC$NH3_30s - DFC$NH3_30s.bg
# check
WT[! complete.cases(WT), ]
DFC[! complete.cases(DFC), ]
# combining
dat <- rbind(WT, DFC)
# ambient temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temp.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
dat$date.time.weather <- dat$date.time
dat$date.time.weather <- as.character(round_date(dat$date.time.weather, '1 hour'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
M.N <- 14.0067 # g * mol^-1
dat$air.flow <- 1
dat[dat$treat == 'WT', ]$air.flow <- 33.2 * 60 # L min^-1
dat[dat$treat == 'DFC', ]$air.flow <- 49 * 60 # L min^-1
dat$A.frame <- 1
dat[dat$treat == 'WT', ]$A.frame <- 0.293 * 0.674 #m^2
dat[dat$treat == 'DFC', ]$A.frame <- (0.7/2)^2 * 3.14 #m^2
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
mean(dat$temp[1:3])
mean(dat$temp)
min(dat$temp)
max(dat$temp)
weather.expA <- dat[, c(1, 36)]
weather.expA$experiment <- 'Experiment A'
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.NH3 * min^-1 * m^-2
dat$flux <- (dat$n * M.N * dat$air.flow) / dat$A.frame
# From g.NH3 * min^-1 * m^-2
# rearranging data by tunnel
dat <- arrange(dat, by = id)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time, last point * 144 min (time from start to start 8 x 18 min)
dat$flux.time <- dat$flux.tr * 144
# cumulative emis
dat <- mutate(group_by(dat, id, treat), cum.emis = cumsum(flux.time))
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
dat.end <- dat.summ[dat.summ$elapsed.time == 60, ]
dat <- dat[dat$elapsed.time <= 60, ]
dat.end.stat <- dat[dat$elapsed.time == 60, ]
ggplot(dat, aes(elapsed.time, cum.emis, color = treat)) +
geom_point() +
geom_line(aes(group = id)) +
theme_bw() +
scale_color_brewer(palette = 'Set1') +
ylab(expression(paste('Cumulative  ', NH[3]-N, '  [g  ', m^-2, ']'))) +
xlab('Time after digestate application [hours]') +
theme(legend.title = element_blank(), legend.position = 'bottom')
# reading in data, ordering and adding elapse.time
org1 <- read.table('../data/picarro data/expA_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('../data/picarro data/expA_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('../data/picarro data/expA_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('../data/picarro data/expA_4.txt', header = TRUE, fill = TRUE)
data <- rbind(org1, org2, org3, org4)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
dat <- data
dat <- dat[-c(0:205), ]
dat$elapsed.time <- difftime(dat$date.time, min(dat$date.time), units='hour')
list <- as.numeric(1:18)
dat$id <- as.character(dat$MPVPosition)
dat <- dat[dat$id == list, ]
ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(0, 1.8)
ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(3.6, 6)# + ylim(600, 1000)
# reading in data, ordering and adding elapse.time
org1 <- read.table('../data/picarro data/expA_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('../data/picarro data/expA_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('../data/picarro data/expA_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('../data/picarro data/expA_4.txt', header = TRUE, fill = TRUE)
data <- rbind(org1, org2, org3, org4)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
dat <- data
dat <- dat[-c(0:205), ]
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13' | dat$id == '14' |
dat$id == '15' | dat$id == '16' | dat$id == '17' | dat$id == '18', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:18] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'v14', 'v15', 'v16', 'v17', 'v18')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:18]
for (i in 1:18){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, v14, v15, v16, v17, v18)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dat <- new.dat
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# first look
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# fixing a time bug
dat$elapsed.time[dat$elapsed.time == 9.60] <- 9.59
# background data:
WT.bg <- dat[dat$treat == 'WT bg', ]
DFC.bg <- dat[dat$treat == 'DFC bg', ]
# outlet data:
WT <- dat[dat$treat == 'WT', ]
DFC <- dat[dat$treat == 'DFC', ]
# average background values
WT.bg.summ <- aggregate2(WT.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
DFC.bg.summ <- aggregate2(DFC.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
# joining average background and outlet data
WT <- full_join(WT.bg.summ, WT, by = 'elapsed.time')
DFC <- full_join(DFC.bg.summ, DFC, by = 'elapsed.time')
# subtracting background from outlet data
WT$NH3.corr <- WT$NH3_30s - WT$NH3_30s.bg
DFC$NH3.corr <- DFC$NH3_30s - DFC$NH3_30s.bg
# check
WT[! complete.cases(WT), ]
DFC[! complete.cases(DFC), ]
View(DFC)
########################################################################################
#### READING IN AND ORDERING DATA ######################################################
########################################################################################
# reading in data, ordering and adding elapse.time
org1 <- read.table('../data/picarro data/expA_1.txt', header = TRUE, fill = TRUE)
org2 <- read.table('../data/picarro data/expA_2.txt', header = TRUE, fill = TRUE)
org3 <- read.table('../data/picarro data/expA_3.txt', header = TRUE, fill = TRUE)
org4 <- read.table('../data/picarro data/expA_4.txt', header = TRUE, fill = TRUE)
data <- rbind(org1, org2, org3, org4)
data$date.time <- paste(data$DATE, data$TIME)
data$date.time<-ymd_hms(data$date.time)
dat <- data
dat <- dat[-c(0:205), ]
# #######################
#
# dat$elapsed.time <- difftime(dat$date.time, min(dat$date.time), units='hour')
#
# list <- as.numeric(1:18)
# dat$id <- as.character(dat$MPVPosition)
# dat <- dat[dat$id == list, ]
#
# ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(0, 1.8)
# ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(3.6, 6)# + ylim(600, 1000)
#
# # ser ud til at vÃ¦re hurtigere genfinding med nye slanger/DC
#
# ##########################
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13' | dat$id == '14' |
dat$id == '15' | dat$id == '16' | dat$id == '17' | dat$id == '18', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:18] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'v14', 'v15', 'v16', 'v17', 'v18')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:18]
for (i in 1:18){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, v14, v15, v16, v17, v18)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dat <- new.dat
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
dat <- data
dat <- dat[-c(0:205), ]
# #######################
#
dat$elapsed.time <- difftime(dat$date.time, min(dat$date.time), units='hour')
list <- as.numeric(1:18)
dat$id <- as.character(dat$MPVPosition)
dat <- dat[dat$id == list, ]
ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(0, 1.8)
ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(3.6, 6)# + ylim(600, 1000)
# ser ud til at vÃ¦re hurtigere genfinding med nye slanger/DC
#
dat <- data
dat <- dat[-c(0:205), ]
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13' | dat$id == '14' |
dat$id == '15' | dat$id == '16' | dat$id == '17' | dat$id == '18', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:18] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'v14', 'v15', 'v16', 'v17', 'v18')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:18]
for (i in 1:18){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, v14, v15, v16, v17, v18)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dat <- new.dat
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# write.csv(dat, 'C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/GitHub/DC-validation-test-2022/data/test1.csv')
# # Experiment A
# # The dataframe in 'data' added here has undergone filtering and addition of chamber ID/treatment
#
# dat <- read.csv('../data/exp1.csv', header = TRUE, sep = ';')
# dat$id <- as.character(dat$id)
# first look
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# fixing a time bug
dat$elapsed.time[dat$elapsed.time == 9.60] <- 9.59
# background data:
WT.bg <- dat[dat$treat == 'WT bg', ]
DFC.bg <- dat[dat$treat == 'DFC bg', ]
# outlet data:
WT <- dat[dat$treat == 'WT', ]
DFC <- dat[dat$treat == 'DFC', ]
# average background values
WT.bg.summ <- aggregate2(WT.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
DFC.bg.summ <- aggregate2(DFC.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
# joining average background and outlet data
WT <- full_join(WT.bg.summ, WT, by = 'elapsed.time')
DFC <- full_join(DFC.bg.summ, DFC, by = 'elapsed.time')
# subtracting background from outlet data
WT$NH3.corr <- WT$NH3_30s - WT$NH3_30s.bg
DFC$NH3.corr <- DFC$NH3_30s - DFC$NH3_30s.bg
# check
WT[! complete.cases(WT), ]
DFC[! complete.cases(DFC), ]
# combining
dat <- rbind(WT, DFC)
# ambient temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temp.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
dat$date.time.weather <- dat$date.time
dat$date.time.weather <- as.character(round_date(dat$date.time.weather, '1 hour'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
M.N <- 14.0067 # g * mol^-1
dat <- data
dat <- dat[-c(0:205), ]
#
# # #######################
# #
# dat$elapsed.time <- difftime(dat$date.time, min(dat$date.time), units='hour')
#
# list <- as.numeric(1:18)
# dat$id <- as.character(dat$MPVPosition)
# dat <- dat[dat$id == list, ]
#
# ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(0, 1.8)
# ggplot(dat, aes(elapsed.time, NH3_raw, color = id)) + geom_point() + xlim(3.6, 6)# + ylim(600, 1000)
#
# # ser ud til at vÃ¦re hurtigere genfinding med nye slanger/DC
# #
# ##########################
########################################################################################
#### ORDERING AND CROPING DATA #########################################################
########################################################################################
dat$id <- dat$MPVPosition
# taking the last point of each measurent from each valve
dat <- filter(dat, !(dat$id == lead(dat$id)))
# Selecting points with whole numbers (when the valve change there is a measurement where the valve position
# is in between two valves, these are removed)
dat <- dat[dat$id == '1' | dat$id == '2' | dat$id == '3' | dat$id == '4' | dat$id == '5' | dat$id == '6' | dat$id == '7' |
dat$id == '8' | dat$id == '9' | dat$id == '10' | dat$id == '11' | dat$id == '12' | dat$id == '13' | dat$id == '14' |
dat$id == '15' | dat$id == '16' | dat$id == '17' | dat$id == '18', ]
# Making elapsed.time fit with the first measurement of each valve = 0
dat$Vid <- 0
dat$Vid[1:18] <- c('V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'v14', 'v15', 'v16', 'v17', 'v18')
splitdat <- split(dat, f = dat$id)
new.names <- dat$Vid[1:18]
for (i in 1:18){
assign(new.names[i], splitdat[[i]])
}
z = list(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, v14, v15, v16, v17, v18)
new.dat = NULL
for(i in z){
i$elapsed.time <- difftime(i$date.time, min(i$date.time), units='hour')
new.dat <- rbind(new.dat,i)
}
dat <- new.dat
dat$elapsed.time <- signif(dat$elapsed.time, digits = 3)
# adding a column with treatment names
dat$treat <- dat$id
dat$treat <- mapvalues(dat$treat, from = c('3', '5', '6', '9', '10', '12', '15', '16', '17'), to = c(rep('DFC', 9)))
dat$treat <- mapvalues(dat$treat, from = c('1', '7', '13'), to = c(rep('WT', 3)))
dat$treat <- mapvalues(dat$treat, from = c('4', '11', '18'), to = c(rep('DFC bg', 3)))
dat$treat <- mapvalues(dat$treat, from = c('2', '8', '14'), to = c(rep('WT bg', 3)))
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# write.csv(dat, 'C:/Users/au583430/OneDrive - Aarhus Universitet/Dokumenter/GitHub/DC-validation-test-2022/data/test1.csv')
# # Experiment A
# # The dataframe in 'data' added here has undergone filtering and addition of chamber ID/treatment
#
# dat <- read.csv('../data/exp1.csv', header = TRUE, sep = ';')
# dat$id <- as.character(dat$id)
# first look
ggplot(dat, aes(elapsed.time, NH3_30s, colour = treat)) + geom_point()
# fixing a time bug
dat$elapsed.time[dat$elapsed.time == 9.60] <- 9.59
# background data:
WT.bg <- dat[dat$treat == 'WT bg', ]
DFC.bg <- dat[dat$treat == 'DFC bg', ]
# outlet data:
WT <- dat[dat$treat == 'WT', ]
DFC <- dat[dat$treat == 'DFC', ]
# average background values
WT.bg.summ <- aggregate2(WT.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
DFC.bg.summ <- aggregate2(DFC.bg, x = c('NH3_30s'), by = c('elapsed.time'),
FUN = list(bg = mean))
# joining average background and outlet data
WT <- full_join(WT.bg.summ, WT, by = 'elapsed.time')
DFC <- full_join(DFC.bg.summ, DFC, by = 'elapsed.time')
# subtracting background from outlet data
WT$NH3.corr <- WT$NH3_30s - WT$NH3_30s.bg
DFC$NH3.corr <- DFC$NH3_30s - DFC$NH3_30s.bg
# check
WT[! complete.cases(WT), ]
DFC[! complete.cases(DFC), ]
# combining
dat <- rbind(WT, DFC)
# ambient temperature data
header <- c('date', 'time', 'temp')
weather <- read.table('../data/temp.txt', fill = TRUE, col.names = header)
weather <- weather[-1, ]
weather$date.time.weather <- paste(weather$date, weather$time)
dat$date.time.weather <- dat$date.time
dat$date.time.weather <- as.character(round_date(dat$date.time.weather, '1 hour'))
dat <- left_join(dat, weather, by = 'date.time.weather')
# constants:
p.con <- 1 # atm
R.con <- 0.082057338 # [L * atm * K^-1 * mol^-1]
M.N <- 14.0067 # g * mol^-1
dat$air.flow <- 1
dat[dat$treat == 'WT', ]$air.flow <- 33.2 * 60 # L min^-1
dat[dat$treat == 'DFC', ]$air.flow <- 49 * 60 # L min^-1
dat$A.frame <- 1
dat[dat$treat == 'WT', ]$A.frame <- 0.293 * 0.674 #m^2
dat[dat$treat == 'DFC', ]$A.frame <- (0.7/2)^2 * 3.14 #m^2
dat$temp <- as.numeric(dat$temp)
dat$air.temp.K <- dat$temp + 273.15
mean(dat$temp[1:3])
mean(dat$temp)
min(dat$temp)
max(dat$temp)
weather.expA <- dat[, c(1, 36)]
weather.expA$experiment <- 'Experiment A'
# calculation of a concentration from ppb to mol * L^-1
dat$n <- p.con / (R.con * dat$air.temp.K) * dat$NH3.corr * 10^-9  # mol * L^-1
# calculation of flux, from mol * L^-1 to g.NH3 * min^-1 * m^-2
dat$flux <- (dat$n * M.N * dat$air.flow) / dat$A.frame
# From g.N * min^-1 * m^-2
# rearranging data by tunnel
dat <- arrange(dat, by = id)
View(dat)
# calculation of total flux over time
# Average ammonia flux in measurement interval
dat$flux.tr <- rollapplyr(dat$flux, 2, mean, fill = NA)
dat$flux.tr[dat$elapsed.time == 0] <- 0
dat$flux.tr[dat$flux.tr < 0 ] <- 0
# calculation of total flux over time, last point * 144 min (time from start to start 18 x 8 min)
dat$flux.time <- dat$flux.tr * 144
# cumulative emis
dat <- mutate(group_by(dat, id, treat), cum.emis = cumsum(flux.time))
# Table for plotting flux
dat.summ <- summarise(group_by(dat, treat, elapsed.time), flux.mn = mean(flux), flux.sd = sd(flux),
cum.emis.mn = mean(cum.emis), cum.emis.sd = sd(cum.emis))
dat.end <- dat.summ[dat.summ$elapsed.time == 60, ]
dat <- dat[dat$elapsed.time <= 60, ]
dat.end.stat <- dat[dat$elapsed.time == 60, ]
ggplot(dat, aes(elapsed.time, cum.emis, color = treat)) +
geom_point() +
geom_line(aes(group = id)) +
theme_bw() +
scale_color_brewer(palette = 'Set1') +
ylab(expression(paste('Cumulative  ', NH[3]-N, '  [g  ', m^-2, ']'))) +
xlab('Time after digestate application [hours]') +
theme(legend.title = element_blank(), legend.position = 'bottom')
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
source('subset_weather.R')
source('mearge.R')
View(df2)
View(bC_th)
# test of recovery of NH3 from NH4Cl solution.
rm(list = ls())
dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('functions.R')
source('packages.R')
source('load.R')
source('subset_and_clean.R')
source('slurry_soil.R')
source('bLS_dataframe.R')
source('DFC_dataframe.R')
source('temp_sensors_dataframe.R')
source('subset_weather.R')
source('mearge.R')
source('plot.R')
View(df2)
View(df1)
test <- df1[df1$elapsed.time == '120', ]
View(test)
test <- df1[df1$elapsed.time == '119', ]
View(test)
test <- test[test$app.meth == 'Trailing hose', ]
test <- df1[df1$elapsed.time == '119.5', ]
View(test)
test <- df1[df1$elapsed.time == '119', ]
test <- df1[df1$elapsed.time == '118', ]
test <- df1[df1$elapsed.time == '119', ]
test <- test[test$app.meth == 'Trailing hose', ]
test <- df1[df1$elapsed.time == '60', ]
test <- test[test$tk == 'A', ]
test <- test[test$treat == 'DFC', ]
